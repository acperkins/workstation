#!/bin/sh
if [ -n "$_acp_ignore_shrc" ]
then
	return 1
fi
if [ -n "$_acp_shrc_loaded" ]
then
	return 1
fi
export _acp_shrc_loaded=1

case "$-" in
*i*)
	;;
*)
	# Shell is not interactive.
	return 1
	;;
esac

if [ -r /usr/local/etc/shrc ]
then
	. /usr/local/etc/shrc
elif [ -r /etc/shrc ]
then
	. /etc/shrc
fi

if [ -d /var/acp ]
then
	export ACP=/var/acp
else
	export ACP="$HOME/data"
fi

# Set up XDG variables. See:
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
if [ ! -d "$XDG_DATA_HOME" ]   ; then install -d -m 0700 "$XDG_DATA_HOME"   ; fi
if [ ! -d "$XDG_CACHE_HOME" ]  ; then install -d -m 0700 "$XDG_CACHE_HOME"  ; fi
if [ ! -d "$XDG_CONFIG_HOME" ] ; then install -d -m 0700 "$XDG_CONFIG_HOME" ; fi
if [ ! -d "$XDG_STATE_HOME" ]  ; then install -d -m 0700 "$XDG_STATE_HOME"  ; fi
if [ ! -d "$HOME/.local/bin" ] ; then install -d -m 0700 "$HOME/.local/bin" ; fi

_acp_add_path () {
	if [ -n "$1" ] && [ -d "$1" ]
	then
		case ":$PATH:" in
			*:"$1":*)
				return
				;;
			*)
				PATH="$1:$PATH"
				export PATH
				return
				;;
		esac
	fi
}

# Last in the list means first in the path.
for dir in "$HOME/.local/bin" \
	   "$HOME/.cargo/bin" \
	   "$XDG_DATA_HOME/gem/ruby/bin" \
	   "$XDG_DATA_HOME/flatpak/exports/bin" \
	   /opt/local/bin \
	   /opt/local/sbin \
	   /var/lib/flatpak/exports/bin \
	   /usr/local/bin \
	   /usr/local/sbin \
	   /usr/bin \
	   /usr/sbin
do
	_acp_add_path "$dir"
done

umask 0022

# Other exports.
export PS1="${PS1:-\$ }"
export HISTFILE=""
export HISTFILESIZE=0
export HISTSIZE=0
export TIME_STYLE=long-iso  # Used by GNU 'ls'.

if [ "$(uname -s)" = Darwin ]
then
	export BASH_SILENCE_DEPRECATION_WARNING=1
fi

# Override this in "$XDG_CONFIG_HOME/shrc.local" or "$HOME/.ssh/config".
export LIBVIRT_DEFAULT_URI="qemu+ssh://vmhost/system"

if test -x /usr/bin/tty
then
	GPG_TTY=$(tty)
	export GPG_TTY
fi

# Set up Vi/Vim.
if command -v vim > /dev/null
then
	export EDITOR="vim -f"
	alias vi=vim
else
	export EDITOR=vi
fi

if [ "$(id -u)" -ne 0 ] && [ -x /usr/bin/dnf ]
then
	alias dnf="dnf --cacheonly --nogpgcheck"
fi

alias 7zencrypt="7z a -t7z -p -mhe"
alias alu="apt list --upgradable"
alias asdo="apt source --download-only"
alias aurmake="makepkg -irs"
alias f=fossil
alias ip="ip -c"
alias isocal="cal --iso --reform=iso --monday --week"
alias la="ls -a"
alias ll="ls -l"
alias ls="command ls -F"
alias now="date +%Y%m%dT%H%M%S%z"
alias nowu="date -u +%Y%m%dT%H%M%SZ"
alias streamenc="openssl aes-256-cbc -pbkdf2 -in - -out - -e"
alias streamdec="openssl aes-256-cbc -pbkdf2 -in - -out - -d"
alias wgr=wordgrinder
alias ytmp3="youtube-dl -q -x --audio-format=mp3"
alias zlu="zypper list-updates"

# Language aliases.
alias en="LANG=en_GB.UTF-8"
alias fr="LANG=fr_FR.UTF-8"

# Alias dig to drill if dig is not installed.
if [ -x /usr/bin/drill ]
then
	alias dig=drill
fi

# Set up Go.
if [ -x "$ACP/opt/go/bin/go" ] || [ -x /usr/bin/go ] || [ -x /usr/local/bin/go ]
then
	export GOPROXY=https://proxy.golang.org
	export GOPATH="$XDG_DATA_HOME/go"
	if [ ! -d "$GOPATH" ]
	then
		mkdir -p "$GOPATH/bin"
		mkdir -p "$GOPATH/pkg"
		mkdir -p "$GOPATH/src"
	fi
	if [ -x "$ACP/opt/go/bin/go" ]
	then
		export GOROOT="$ACP/opt/go"
		_acp_add_path "$GOROOT/bin"
	fi
	_acp_add_path "$GOPATH/bin"
fi

alias prun='podman run --rm --interactive --tty --security-opt label=disable --volume "$HOME":"$HOME" --volume "$XDG_RUNTIME_DIR":"$XDG_RUNTIME_DIR" --env XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR" --env XDG_SESSION_TYPE=wayland --ipc host'
alias pruncerts='prun --volume /etc/pki/ca-trust:/etc/pki/ca-trust:ro --volume /etc/ssl/certs:/etc/ssl/certs:ro'

if command -v ssh-agent > /dev/null
then
	export SSH_AUTH_SOCK="${SSH_AUTH_SOCK:-$XDG_STATE_HOME/ssh-agent.socket}"
	export SSH_AGENT_PID="${SSH_AGENT_PID:-$XDG_STATE_HOME/ssh-agent.pid}"
	if [ ! -S "$SSH_AUTH_SOCK" ]
	then
		ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null
	fi
fi

mkcd () {
	if [ $# -ne 1 ]
	then
		echo "mkcd: incorrect arguments (one directory required)." >&2
		return 1
	else
		mkdir -p "$1"
		cd "$1" || return
	fi
}

linapm () {
	cat /sys/class/power_supply/BAT0/status
	cat /sys/class/power_supply/BAT0/capacity
}

xa () {
	out=$(xrandr --listactivemonitors | awk 'NR!=1{print " "$NF" "}')
	for monitor in $out
	do
		m=$(echo "$monitor" | sed 's/ //g')
		xrandr --output "$m" --auto
	done
}

emacsro () {
	emacs "$1" -f view-mode
}

tm () {
	if tmux list-sessions > /dev/null 2>&1
	then
		tmux attach-session
	else
		tmux new-session
	fi
}

if [ -x /usr/bin/yum ] && [ ! -x /usr/bin/dnf ]
then
	alias dnf=yum
fi

usermotd () {
	if [ -n "$_acp_motd_shown" ]
	then
		return 1
	fi
	export _acp_motd_shown=1
	
	# OS (kernel) name and version in reverse video.
	printf "\033[7m$(uname -sr)\033[0m\n"

	# Distro name and version on Linux and macOS.
	if [ -r /etc/os-release ]
	then
		echo "    $(. /etc/os-release; echo "$NAME" "$VERSION")"
	fi
	if [ "$(uname -s)" = "Darwin" ]
	then
		echo "    $(sw_vers -productName) $(sw_vers -productVersion)"
	fi

	# System uptime and load averages.
	uptime

	# SSH keys.
	if command -v ssh-add > /dev/null
	then
		ssh-add -l
	fi

	# Language for the shell.
	echo "LANG=$LANG"

	# Timezone.
	if [ -n "$TZ" ]
	then
		echo "TZ=$TZ"
	elif [ -x /usr/bin/timedatectl ] && [ "$(systemctl is-system-running)" != offline ]
	then
		timedatectl show --property=Timezone | sed 's/Timezone=/TZ=/'
	fi

	# Shell name and version.
	if [ -n "$BASH_VERSION" ]
	then
		echo "bash $BASH_VERSION"
	elif [ -n "$ZSH_VERSION" ]
	then
		echo "zsh $ZSH_VERSION"
	else
		echo "SHELL=$SHELL"
	fi
}

simpletls () {
	# Create a self-signed certificate with:
	#     openssl req -new -x509 \
	#     -keyout $ACP/openssl/$(hostname)-key.pem \
	#     -out $ACP/openssl/$(hostname-cert.pem
	if [ "$1" = "-l" ]
	then
		openssl s_server -cert "$ACP/openssl/$(hostname)-cert.pem" -key "$HOME/data/openssl/$(hostname)-key.pem" -tls1_3 -port "$2"
	else
		openssl s_client -CAfile "$ACP/openssl/$1-cert.pem" -tls1_3 -connect "$1":"$2"
	fi
}

tlscheck () {
	if [ -z "$1" ]
	then
		echo "Usage: tlscheck hostname:port" >&2
	else
		openssl s_client -connect "$1" </dev/null | openssl x509 -text
	fi
}

if [ -r "$XDG_CONFIG_HOME/shrc.local" ]
then
	. "$XDG_CONFIG_HOME/shrc.local"
fi

usermotd
